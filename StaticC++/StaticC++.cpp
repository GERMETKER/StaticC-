#include <iostream>
//Статические переменные----------------------------------------
/*
void Numberer() 
{
    static int number = 0;
    std::cout << count++;
}

int main()
{
    for (int i = 0; i < 10; i++) {
        Numberer();
        std::cout << "\n";
    }
    return 0;
}
*/
//Статические обьекты класса---------------------------------
/*
class Klass {
public:
    Klass() 
    { 
        std::cout << "Constructor\n";
    }
    ~Klass() {
        std::cout << "Destructor\n";
    }
};
void Creat() 
{
    static Klass obj; 
} 

int main() 
{
    Creat(); 
    std::cout << "Конец main\n";
    return 0;
}
*/
//Статические члены класса---------------------------------------
/*
class A 
{
public:
    A() 
    { 
        std::cout << "Constructor A\n"; 
    }
    ~A() 
    { 
        std::cout << "Destructor A\n"; 
    }
};
class B 
{
public:
    B() 
    { 
        std::cout << "Constructor B\n"; 
    }
    ~B() 
    { 
        std::cout << "Destructor B\n"; 
    }

private:
    static A a;
};
//A B::a;  //оператор разрешения области видимости(::)
int main() 
{
    B b;
    return 0;
}
//Причиной такого поведения является то, что статические члены класса не инициализируются 
// с помощью конструктора, поскольку они не зависят от инициализации объекта.
//Т.е. в строке 15 мы только объявляем объект,
//  а не определяем его, так как определение
//  должно происходить вне класса с помощью оператора разрешения области видимости (::).
//  Давайте определим члены класса B.
*/
//Статические функции-----------------------------------------------------------------------
/*
static int Sum(int a, int b)
{
    int someNumb = 1;
    return a + b + someNumb;
}
int main()
{
    std::cout << Sum(5, 6) << "\n";
}
//По умолчанию все функции в С глобальные и, если вы захотите создать две функции с одинаковым именем
//  в двух разных .c(.cpp) файлах одного проекта, то получите ошибку о том,
//  что данная функция уже определена
//В этом случае вы говорите компилятору, что доступ к статическим функциям ограничен файлом,
//  в котором они объявлены. И он имеет доступ только к функции sum() из math.cpp файла.
//  Таким образом, используя static для функции,
//  мы можем ограничить область видимости этой функции, и данная функция не будет видна в других файлах
*/
//Статические функции-члены класса (методы)--------------------------------------------------------
/*
class A 
{
public:
    A() 
    { 
        std::cout << "Constructor A\n"; 
    }
    ~A() 
    { 
        std::cout << "Destructor A\n"; 
    }
    static void StatFunk() 
    {
        std::cout << "StatFunk\n";
    }
};
int main() 
{
    A::StatFunk();
    return 0;
}
//Из вывода видно, что никакого создания объекта нет
//  и конструктор/деструктор не вызывается.
*/
